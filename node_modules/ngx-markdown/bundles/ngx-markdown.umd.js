(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('marked'), require('@angular/common'), require('@angular/common/http'), require('@angular/platform-browser'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-markdown', ['exports', '@angular/core', 'marked', '@angular/common', '@angular/common/http', '@angular/platform-browser', 'rxjs/operators'], factory) :
    (factory((global['ngx-markdown'] = {}),global.ng.core,null,global.ng.common,global.ng.common.http,global.ng.platformBrowser,global.rxjs.operators));
}(this, (function (exports,core,marked,common,http,platformBrowser,operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var LanguagePipe = /** @class */ (function () {
        function LanguagePipe() {
        }
        /**
         * @param {?} value
         * @param {?} language
         * @return {?}
         */
        LanguagePipe.prototype.transform = /**
         * @param {?} value
         * @param {?} language
         * @return {?}
         */
            function (value, language) {
                if (typeof value !== 'string') {
                    console.error("LanguagePipe has been invoked with an invalid value type [" + value + "]");
                    return value;
                }
                if (typeof language !== 'string') {
                    console.error("LanguagePipe has been invoked with an invalid parameter [" + language + "]");
                    return value;
                }
                return '```' + language + '\n' + value + '\n```';
            };
        LanguagePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'language',
                    },] },
        ];
        return LanguagePipe;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var MarkedOptions = /** @class */ (function () {
        function MarkedOptions() {
        }
        return MarkedOptions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var MarkedRenderer = /** @class */ (function (_super) {
        __extends(MarkedRenderer, _super);
        function MarkedRenderer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MarkedRenderer;
    }(marked.Renderer));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var errorSrcWithoutHttpClient = '[ngx-markdown] When using the [src] attribute you *have to* pass the `HttpClient` as a parameter of the `forRoot` method. See README for more information';
    var MarkdownService = /** @class */ (function () {
        function MarkdownService(platform, http$$1, domSanitizer, options) {
            this.platform = platform;
            this.http = http$$1;
            this.domSanitizer = domSanitizer;
            this.options = options;
        }
        Object.defineProperty(MarkdownService.prototype, "options", {
            get: /**
             * @return {?}
             */ function () { return this._options; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._options = Object.assign({}, { renderer: new MarkedRenderer() }, this._options, value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MarkdownService.prototype, "renderer", {
            get: /**
             * @return {?}
             */ function () { return this.options.renderer; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.options.renderer = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} markdown
         * @param {?=} decodeHtml
         * @param {?=} markedOptions
         * @return {?}
         */
        MarkdownService.prototype.compile = /**
         * @param {?} markdown
         * @param {?=} decodeHtml
         * @param {?=} markedOptions
         * @return {?}
         */
            function (markdown, decodeHtml, markedOptions) {
                if (decodeHtml === void 0) {
                    decodeHtml = false;
                }
                if (markedOptions === void 0) {
                    markedOptions = this.options;
                }
                /** @type {?} */
                var precompiled = this.precompile(markdown);
                /** @type {?} */
                var compiled = marked.parse(decodeHtml ? this.decodeHtml(precompiled) : precompiled, markedOptions);
                return markedOptions.sanitize && !markedOptions.sanitizer
                    ? this.domSanitizer.sanitize(core.SecurityContext.HTML, compiled)
                    : compiled;
            };
        /**
         * @param {?} src
         * @return {?}
         */
        MarkdownService.prototype.getSource = /**
         * @param {?} src
         * @return {?}
         */
            function (src) {
                var _this = this;
                if (!this.http) {
                    throw new Error(errorSrcWithoutHttpClient);
                }
                return this.http
                    .get(src, { responseType: 'text' })
                    .pipe(operators.map(function (markdown) { return _this.handleExtension(src, markdown); }));
            };
        /**
         * @param {?=} element
         * @return {?}
         */
        MarkdownService.prototype.highlight = /**
         * @param {?=} element
         * @return {?}
         */
            function (element) {
                if (common.isPlatformBrowser(this.platform) && typeof Prism !== 'undefined') {
                    if (!element) {
                        element = document;
                    }
                    element
                        .querySelectorAll('pre code:not([class*="language-"])')
                        .forEach(function (x) { return x.classList.add('language-none'); });
                    Prism.highlightAllUnder(element);
                }
            };
        /**
         * @param {?} html
         * @return {?}
         */
        MarkdownService.prototype.decodeHtml = /**
         * @param {?} html
         * @return {?}
         */
            function (html) {
                if (common.isPlatformBrowser(this.platform)) {
                    /** @type {?} */
                    var textarea = document.createElement('textarea');
                    textarea.innerHTML = html;
                    return textarea.value;
                }
                return html;
            };
        /**
         * @param {?} src
         * @param {?} markdown
         * @return {?}
         */
        MarkdownService.prototype.handleExtension = /**
         * @param {?} src
         * @param {?} markdown
         * @return {?}
         */
            function (src, markdown) {
                /** @type {?} */
                var extension = src
                    ? src.split('?')[0].split('.').splice(-1).join()
                    : null;
                return extension !== 'md'
                    ? '```' + extension + '\n' + markdown + '\n```'
                    : markdown;
            };
        /**
         * @param {?} markdown
         * @return {?}
         */
        MarkdownService.prototype.precompile = /**
         * @param {?} markdown
         * @return {?}
         */
            function (markdown) {
                if (!markdown) {
                    return '';
                }
                /** @type {?} */
                var indentStart;
                return markdown
                    .split('\n')
                    .map(function (line) {
                    /** @type {?} */
                    var lineIdentStart = indentStart;
                    // find position of 1st non-whitespace character
                    // to determine the current line indentation start
                    if (line.length > 0) {
                        lineIdentStart = isNaN(lineIdentStart)
                            ? line.search(/\S|$/)
                            : Math.min(line.search(/\S|$/), lineIdentStart);
                    }
                    // keep 1st non-whitespace line indentation
                    // as base reference for other lines
                    if (isNaN(indentStart)) {
                        indentStart = lineIdentStart;
                    }
                    // remove whitespaces before current line indentation
                    return !!lineIdentStart
                        ? line.substring(lineIdentStart)
                        : line;
                }).join('\n');
            };
        MarkdownService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        MarkdownService.ctorParameters = function () {
            return [
                { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
                { type: http.HttpClient, decorators: [{ type: core.Optional }] },
                { type: platformBrowser.DomSanitizer },
                { type: MarkedOptions }
            ];
        };
        return MarkdownService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var PrismPlugin = {
        LineHighlight: 'line-highlight',
        LineNumbers: 'line-numbers',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var MarkdownComponent = /** @class */ (function () {
        function MarkdownComponent(element, markdownService) {
            this.element = element;
            this.markdownService = markdownService;
            this.error = new core.EventEmitter();
            this.load = new core.EventEmitter();
            this._lineHighlight = false;
            this._lineNumbers = false;
        }
        Object.defineProperty(MarkdownComponent.prototype, "lineNumbers", {
            // Plugin - lineNumbers
            get: /**
             * @return {?}
             */ function () { return this._lineNumbers; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this._lineNumbers = this.coerceBooleanProperty(value); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MarkdownComponent.prototype, "lineHighlight", {
            // Plugin - lineHighlight
            get: /**
             * @return {?}
             */ function () { return this._lineHighlight; },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) { this._lineHighlight = this.coerceBooleanProperty(value); },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        MarkdownComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                if (this.data) {
                    this.handleData();
                    return;
                }
                if (this.src) {
                    this.handleSrc();
                    return;
                }
            };
        /**
         * @return {?}
         */
        MarkdownComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (!this.data && !this.src) {
                    this.handleTransclusion();
                }
            };
        /**
         * @param {?} markdown
         * @param {?=} decodeHtml
         * @return {?}
         */
        MarkdownComponent.prototype.render = /**
         * @param {?} markdown
         * @param {?=} decodeHtml
         * @return {?}
         */
            function (markdown, decodeHtml) {
                if (decodeHtml === void 0) {
                    decodeHtml = false;
                }
                this.element.nativeElement.innerHTML = this.markdownService.compile(markdown, decodeHtml);
                this.handlePlugins();
                this.markdownService.highlight(this.element.nativeElement);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        MarkdownComponent.prototype.coerceBooleanProperty = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return value != null && "" + value !== 'false';
            };
        /**
         * @return {?}
         */
        MarkdownComponent.prototype.handleData = /**
         * @return {?}
         */
            function () {
                this.render(this.data);
            };
        /**
         * @return {?}
         */
        MarkdownComponent.prototype.handleSrc = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.markdownService
                    .getSource(this.src)
                    .subscribe(function (markdown) {
                    _this.render(markdown);
                    _this.load.emit(markdown);
                }, function (error) { return _this.error.emit(error); });
            };
        /**
         * @return {?}
         */
        MarkdownComponent.prototype.handleTransclusion = /**
         * @return {?}
         */
            function () {
                this.render(this.element.nativeElement.innerHTML, true);
            };
        /**
         * @return {?}
         */
        MarkdownComponent.prototype.handlePlugins = /**
         * @return {?}
         */
            function () {
                if (this.lineHighlight) {
                    this.setPluginClass(this.element.nativeElement, PrismPlugin.LineHighlight);
                    this.setPluginOptions(this.element.nativeElement, { dataLine: this.line, dataLineOffset: this.lineOffset });
                }
                if (this.lineNumbers) {
                    this.setPluginClass(this.element.nativeElement, PrismPlugin.LineNumbers);
                    this.setPluginOptions(this.element.nativeElement, { dataStart: this.start });
                }
            };
        /**
         * @param {?} element
         * @param {?} plugin
         * @return {?}
         */
        MarkdownComponent.prototype.setPluginClass = /**
         * @param {?} element
         * @param {?} plugin
         * @return {?}
         */
            function (element, plugin) {
                var _a;
                /** @type {?} */
                var preElements = element.querySelectorAll('pre');
                for (var i = 0; i < preElements.length; i++) {
                    /** @type {?} */
                    var classes = plugin instanceof Array ? plugin : [plugin];
                    (_a = preElements.item(i).classList).add.apply(_a, __spread(classes));
                }
            };
        /**
         * @param {?} element
         * @param {?} options
         * @return {?}
         */
        MarkdownComponent.prototype.setPluginOptions = /**
         * @param {?} element
         * @param {?} options
         * @return {?}
         */
            function (element, options) {
                var _this = this;
                /** @type {?} */
                var preElements = element.querySelectorAll('pre');
                var _loop_1 = function (i) {
                    Object.keys(options).forEach(function (option) {
                        /** @type {?} */
                        var attributeValue = options[option];
                        if (!!attributeValue) {
                            /** @type {?} */
                            var attributeName = _this.toLispCase(option);
                            preElements.item(i).setAttribute(attributeName, attributeValue.toString());
                        }
                    });
                };
                for (var i = 0; i < preElements.length; i++) {
                    _loop_1(i);
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        MarkdownComponent.prototype.toLispCase = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var upperChars = value.match(/([A-Z])/g);
                if (!upperChars) {
                    return value;
                }
                /** @type {?} */
                var str = value.toString();
                for (var i = 0, n = upperChars.length; i < n; i++) {
                    str = str.replace(new RegExp(upperChars[i]), '-' + upperChars[i].toLowerCase());
                }
                if (str.slice(0, 1) === '-') {
                    str = str.slice(1);
                }
                return str;
            };
        MarkdownComponent.decorators = [
            { type: core.Component, args: [{
                        // tslint:disable-next-line:component-selector
                        selector: 'markdown, [markdown]',
                        template: '<ng-content></ng-content>',
                    },] },
        ];
        /** @nocollapse */
        MarkdownComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: MarkdownService }
            ];
        };
        MarkdownComponent.propDecorators = {
            data: [{ type: core.Input }],
            src: [{ type: core.Input }],
            lineNumbers: [{ type: core.Input }],
            start: [{ type: core.Input }],
            lineHighlight: [{ type: core.Input }],
            line: [{ type: core.Input }],
            lineOffset: [{ type: core.Input }],
            error: [{ type: core.Output }],
            load: [{ type: core.Output }]
        };
        return MarkdownComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var MarkdownPipe = /** @class */ (function () {
        function MarkdownPipe(elementRef, markdownService, zone) {
            this.elementRef = elementRef;
            this.markdownService = markdownService;
            this.zone = zone;
        }
        /**
         * @param {?} value
         * @return {?}
         */
        MarkdownPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                if (value == null) {
                    return '';
                }
                if (typeof value !== 'string') {
                    console.error("MarkdownPipe has been invoked with an invalid value type [" + value + "]");
                    return value;
                }
                /** @type {?} */
                var markdown = this.markdownService.compile(value);
                this.zone.onStable
                    .pipe(operators.first())
                    .subscribe(function () { return _this.markdownService.highlight(_this.elementRef.nativeElement); });
                return markdown;
            };
        MarkdownPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'markdown',
                    },] },
        ];
        /** @nocollapse */
        MarkdownPipe.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: MarkdownService },
                { type: core.NgZone }
            ];
        };
        return MarkdownPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var initialMarkedOptions = {
        provide: MarkedOptions,
        useValue: {
            gfm: true,
            tables: true,
            breaks: false,
            pedantic: false,
            sanitize: false,
            smartLists: true,
            smartypants: false,
        },
    };
    /** @type {?} */
    var sharedDeclarations = [
        LanguagePipe,
        MarkdownComponent,
        MarkdownPipe,
    ];
    var MarkdownModule = /** @class */ (function () {
        function MarkdownModule() {
        }
        /**
         * @param {?=} markdownModuleConfig
         * @return {?}
         */
        MarkdownModule.forRoot = /**
         * @param {?=} markdownModuleConfig
         * @return {?}
         */
            function (markdownModuleConfig) {
                return {
                    ngModule: MarkdownModule,
                    providers: __spread([
                        MarkdownService
                    ], (markdownModuleConfig
                        ? [
                            markdownModuleConfig.loader || [],
                            markdownModuleConfig.markedOptions || initialMarkedOptions,
                        ]
                        : [initialMarkedOptions])),
                };
            };
        /**
         * @return {?}
         */
        MarkdownModule.forChild = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: MarkdownModule,
                };
            };
        MarkdownModule.decorators = [
            { type: core.NgModule, args: [{
                        exports: __spread(sharedDeclarations),
                        declarations: __spread(sharedDeclarations),
                    },] },
        ];
        return MarkdownModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.LanguagePipe = LanguagePipe;
    exports.MarkdownComponent = MarkdownComponent;
    exports.initialMarkedOptions = initialMarkedOptions;
    exports.MarkdownModule = MarkdownModule;
    exports.MarkdownPipe = MarkdownPipe;
    exports.errorSrcWithoutHttpClient = errorSrcWithoutHttpClient;
    exports.MarkdownService = MarkdownService;
    exports.MarkedOptions = MarkedOptions;
    exports.MarkedRenderer = MarkedRenderer;
    exports.PrismPlugin = PrismPlugin;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,